[{"/Users/felipequintero/git/Tech-Challenges/code-assessments/swe-foam-challenge/client/src/index.js":"1","/Users/felipequintero/git/Tech-Challenges/code-assessments/swe-foam-challenge/client/src/App.js":"2","/Users/felipequintero/git/Tech-Challenges/code-assessments/swe-foam-challenge/client/src/components/ImagesList.js":"3","/Users/felipequintero/git/Tech-Challenges/code-assessments/swe-foam-challenge/client/src/components/FoamImageList.js":"4"},{"size":219,"mtime":1646194246100,"results":"5","hashOfConfig":"6"},{"size":277,"mtime":1646194160672,"results":"7","hashOfConfig":"6"},{"size":4250,"mtime":1646197322917,"results":"8","hashOfConfig":"6"},{"size":1406,"mtime":1646194579234,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1tvaevq",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/felipequintero/git/Tech-Challenges/code-assessments/swe-foam-challenge/client/src/index.js",[],[],"/Users/felipequintero/git/Tech-Challenges/code-assessments/swe-foam-challenge/client/src/App.js",[],[],"/Users/felipequintero/git/Tech-Challenges/code-assessments/swe-foam-challenge/client/src/components/ImagesList.js",["23"],[],"import React, { useEffect, useState } from \"react\";\nimport { Card, Container } from \"react-bootstrap\";\nimport FoamImageList from \"./FoamImageList\";\nimport axios from \"axios\";\n\nconst ImagesList = (props) => {\n  const [images, setImages] = useState([]);\n  const [nextImageSet, setNextImageSet] = useState(\"\");\n  const [foam, setFoam] = useState(false);\n  const [foamImages, setFoamImages] = useState([]);\n  const [itemOffset, setItemOffset] = useState(0);\n  const imagesPerPage = 8;\n\n  useEffect(() => {\n    axios.get(`${process.env.REACT_APP_API_URL}/`).then((response) => {\n      setImages(response.data);\n      setNextImageSet(response.data[response.data.length - 1]);\n      console.log(response.data);\n    });\n  }, []);\n\n  const handleLoadMoreButton = async (e) => {\n    e.preventDefault();\n\n    const newOffset = itemOffset + imagesPerPage;\n\n    console.log(\n      `User has requested image set ${itemOffset}, which is offset ${newOffset}`\n    );\n    setItemOffset(newOffset);\n  };\n\n  const handlePreviousImageSetButton = async (e) => {\n    e.preventDefault();\n\n    const newOffset = itemOffset - imagesPerPage;\n\n    console.log(\n      `User has requested previous image set ${itemOffset}, which is offset -${newOffset}`\n    );\n    setItemOffset(newOffset);\n  };\n\n  const handleFoam = (image) => {\n    if (image.category === \"uncategorized\") {\n      image.category = \"foam\";\n      image.foam = 1;\n    } else if (image.category === \"foam\") {\n      image.category = \"no-foam\";\n      image.foam = 0;\n    } else {\n      image.category = \"foam\";\n    }\n\n    axios\n      .put(`${process.env.REACT_APP_API_URL}/${image.id}`, image)\n      .then((response) => {\n        console.log(response.data);\n        console.log(\"Image category updatged!\", image.category);\n        setFoam(!foam);\n      });\n  };\n\n  const handleFoamButton = async (e) => {\n    if (foamImages.length > 0) {\n      foamImages\n        .filter((image) => image.category === \"uncategorized\")\n        .map((image) => {\n          return (image.category = \"foam\");\n        });\n      setFoam(false);\n    } else {\n      foamImages.map((image) => {\n        return (image.category = \"no-foam\");\n      });\n      setFoam(true);\n    }\n    setFoam(!foam);\n  };\n\n  const currentImageDisplay = images.slice(\n    itemOffset,\n    itemOffset + imagesPerPage\n  );\n\n  return (\n    <>\n      <div className=\"image-load-nav\">\n        <span className=\"load-previous\">\n          {itemOffset > 0 && (\n            <button onClick={handlePreviousImageSetButton}>\n              {\"<< Load Previous\"}\n            </button>\n          )}\n        </span>\n        <span className=\"load-more\">\n          {nextImageSet && (\n            <button onClick={handleLoadMoreButton}> {\"Load Next >>\"} </button>\n          )}\n        </span>\n        <span className=\"foam\">\n          <button className=\"foam-button\" onClick={handleFoamButton}>\n            {\"Toggle Foam Images\"}\n          </button>\n        </span>\n      </div>\n      <Container>\n        <Card>\n          <Card.Body>\n            {foam && <FoamImageList handleFoam={handleFoam} images={images} />}\n          </Card.Body>\n        </Card>\n      </Container>\n      <Container>\n        <Card>\n          <Card.Body className=\"image-grid\">\n            {currentImageDisplay.map((image) => {\n              return (\n                <div key={image.id}>\n                  <img width=\"250\" src={image.url} alt=\"possible foam images\" />\n                  <div>\n                    Category: <strong>{image.category}</strong>\n                  </div>\n                  <br />\n                  <div>\n                    Location: <em>{image.lastModified}</em>\n                  </div>\n                  <br />\n                  <div>ID: {image.id}</div>\n                  <br />\n                  <button\n                    className=\"foam-status-button\"\n                    id={image.id}\n                    name=\"foam\"\n                    value={image}\n                    onClick={() => handleFoam(image)}\n                  >\n                    Toggle Foam Tag <br />\n                  </button>\n                  <br />\n                </div>\n              );\n            })}\n          </Card.Body>\n        </Card>\n      </Container>\n    </>\n  );\n};\n\nexport default ImagesList;\n","/Users/felipequintero/git/Tech-Challenges/code-assessments/swe-foam-challenge/client/src/components/FoamImageList.js",[],[],{"ruleId":"24","severity":1,"message":"25","line":10,"column":22,"nodeType":"26","messageId":"27","endLine":10,"endColumn":35},"no-unused-vars","'setFoamImages' is assigned a value but never used.","Identifier","unusedVar"]